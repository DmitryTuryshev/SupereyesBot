from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from app.database.db_work import get_books_by_user_all, get_books_by_user, add_book, remove_book_by_id, change_name, change_author_book, change_priority_book
from app.guard.check import check_access


class AddBook(StatesGroup):
    waiting_for_book_name = State()
    waiting_for_book_author = State()
    waiting_for_book_priority = State()


class RemoveBook(StatesGroup):
    waiting_for_book_number = State()


class ChangeBook(StatesGroup):
    waiting_for_book_ch_number = State()
    waiting_for_book_ch_action = State()
    waiting_for_book_ch_name = State()
    waiting_for_book_ch_author = State()
    waiting_for_book_ch_priority = State()


async def cmd_book(message: types.Message, state: FSMContext):
    await state.finish()

    if not check_access(message.from_user.id):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        return

    books = get_books_by_user_all(message.from_user.id)
    if not books or books is None:
        menu = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.\n\n"
    else:
        menu = "–í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n"
        for index, book in enumerate(books):
            menu += f"    –ù–∞–∑–≤–∞–Ω–∏–µüìñ:  <i>{book[1]}</i>\n"
            menu += f"    –ê–≤—Ç–æ—Ä‚úçüèª:  <i>{book[2]}</i>\n"
            menu += f"    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç‚ù§:  <i>{book[4]}</i>\n"
            if book[3] == "active":
                menu += f"    –°—Ç–∞—Ç—É—ÅüîÑ:  <i>–∞–∫—Ç–∏–≤–Ω–∞</i>\n\n"
            else:
                menu += f"    –°—Ç–∞—Ç—É—ÅüîÑ:  <i>–ø–æ–¥–∞—Ä–µ–Ω–∞</i>\n\n"

    menu += "1. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É (/add_b)\n" \
            "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–Ω–∏–≥–∏ (/ch_b)\n" \
            "3. –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É (/del_b)\n\n"\
            "–ú–µ–Ω—é: /cancel\n"

    await message.answer(
        menu,
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode=types.ParseMode.HTML
    )


async def start_add_book(message: types.Message):
    if not check_access(message.from_user.id):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("/cancel")

    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:", reply_markup=keyboard)
    await AddBook.waiting_for_book_name.set()


async def book_name(message: types.Message, state: FSMContext):
    if len(message.text) < 3:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤:")
        return
    await state.update_data(book_name=message.text)

    await AddBook.next()
    await message.answer("–ê–≤—Ç–æ—Ä —ç—Ç–æ–π –∫–Ω–∏–≥–∏:")


async def book_author(message: types.Message, state: FSMContext):
    if len(message.text) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤:")
        return
    await state.update_data(book_author=message.text)

    await AddBook.next()
    await message.answer("–ü—Ä–∏–æ—Ä–∏—Ç–µ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –æ—Ç 1 –¥–æ 10, –≥–¥–µ:\n\n"
                         "1 - —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É —Å–ª–µ–¥—É—â–µ–π.\n"
                         "10 - –¥–∞—Ä–∏—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—é –æ—á–µ—Ä–µ–¥—å.")


async def book_priority(message: types.Message, state: FSMContext):
    try:
        priority = int(message.text)
        if priority < 0 or priority > 11:
            await message.answer("–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")
            return
    except:
        await message.answer("–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")
        return

    data = await state.get_data()

    add_book(message.from_user.id, data["book_name"], data["book_author"], priority)

    await message.answer("–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                         "–ö–Ω–∏–≥–∏: /book\n"
                         "–ú–µ–Ω—é: /cancel")
    await state.finish()


async def cmd_remove_book(message: types.Message, state: FSMContext):
    await state.finish()

    if not check_access(message.from_user.id):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
        return

    books = get_books_by_user(message.from_user.id)
    if not books or books is None:
        menu = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.\n\n" \
               "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É: /add_b\n"
        await message.answer(menu)
        return
    else:
        book_numbers = []
        menu = "–í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n"
        for index, book in enumerate(books):
            menu += f"{index+1}.  –ù–∞–∑–≤–∞–Ω–∏–µüìñ:  <i>{book[1]}</i>\n"
            menu += f"    –ê–≤—Ç–æ—Ä‚úçüèª:  <i>{book[2]}</i>\n"
            menu += f"    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç‚ù§:  <i>{book[4]}</i>\n\n"
            book_numbers.append(book[0])
    menu += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

    await state.update_data(book_numbers=book_numbers)
    await message.answer(menu, parse_mode=types.ParseMode.HTML)
    await RemoveBook.waiting_for_book_number.set()


async def book_number_for_remove(message: types.Message, state: FSMContext):
    try:
        index = int(message.text) - 1

        data = await state.get_data()
        id = data["book_numbers"][index]
    except:
        await message.answer("–ù–µ—Ç –∫–Ω–∏–≥–∏ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º\n\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.\n"
                             "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel ")
        return

    remove_book_by_id(id)

    await message.answer("–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n"
                         "–ö–Ω–∏–≥–∏: /book\n"
                         "–ú–µ–Ω—é: /cancel")

    await state.finish()


async def cmd_change_book(message: types.Message, state: FSMContext):
    await state.finish()

    if not check_access(message.from_user.id):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
        return

    books = get_books_by_user(message.from_user.id)
    if not books or books is None:
        menu = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.\n\n" \
               "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É: /add_b\n"
        await message.answer(menu)
        return
    else:
        book_numbers = []
        menu = "–í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n"
        for index, book in enumerate(books):
            menu += f"{index+1}.  –ù–∞–∑–≤–∞–Ω–∏–µüìñ:  <i>{book[1]}</i>\n"
            menu += f"    –ê–≤—Ç–æ—Ä‚úçüèª:  <i>{book[2]}</i>\n"
            menu += f"    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç‚ù§:  <i>{book[4]}</i>\n"
            book_numbers.append(book[0])
    menu += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

    await state.update_data(book_numbers_ch=book_numbers)
    await message.answer(menu, parse_mode=types.ParseMode.HTML)
    await ChangeBook.waiting_for_book_ch_number.set()


async def book_number_for_change(message: types.Message, state: FSMContext):
    try:
        index = int(message.text) - 1

        data = await state.get_data()
        id = data["book_numbers_ch"][index]
    except:
        await message.answer("–ù–µ—Ç –∫–Ω–∏–≥–∏ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.\n\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.\n"
                             "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel ")
        return

    await state.update_data(id_book=id)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
                         "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                         "2. –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞\n"
                         "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n\n"
                         "–ú–µ–Ω—é: /cancel\n"
                         "–ö–Ω–∏–≥–∏: /book")

    await ChangeBook.next()


async def book_change_action(message: types.Message, state: FSMContext):
    try:
        index = int(message.text)
        if not index in [1, 2, 3]:
            await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
                                 "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel ")
            return
    except:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
                             "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel ")
        return
    ans="--"
    if index==1:
        ans="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:"
        await ChangeBook.waiting_for_book_ch_name.set()
    elif index==2:
        ans="–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:"
        await ChangeBook.waiting_for_book_ch_author.set()
    if index==3:
        ans="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–Ω–∏–≥–∏:"
        await ChangeBook.waiting_for_book_ch_priority.set()
    await message.answer(ans)


async def book_change_name(message: types.Message, state: FSMContext):
    if len(message.text) < 3:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤:")
        return
    data = await state.get_data()
    id = data["id_book"]
    change_name(id, message.text)
    await state.finish()
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
                         "–ö–Ω–∏–≥–∏: /book ")


async def book_change_author(message: types.Message, state: FSMContext):
    if len(message.text) < 3:
        await message.answer("–ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤:")
        return
    data = await state.get_data()
    id = data["id_book"]
    change_author_book(id, message.text)
    await state.finish()
    await message.answer("–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
                         "–ö–Ω–∏–≥–∏: /book ")


async def book_change_priority(message: types.Message, state: FSMContext):
    try:
        priority = int(message.text)
        if priority < 0 or priority > 11:
            await message.answer("–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")
            return
    except:
        await message.answer("–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")
        return

    data = await state.get_data()
    id = data["id_book"]
    change_priority_book(id, priority)
    await state.finish()
    await message.answer("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
                         "–ö–Ω–∏–≥–∏: /book ")


def register_handlers_book(dp: Dispatcher):
    dp.register_message_handler(cmd_book, commands=["book"], state="*")

    dp.register_message_handler(start_add_book, commands=["add_b"], state="*")
    dp.register_message_handler(book_name, state=AddBook.waiting_for_book_name)
    dp.register_message_handler(book_author, state=AddBook.waiting_for_book_author)
    dp.register_message_handler(book_priority, state=AddBook.waiting_for_book_priority)

    dp.register_message_handler(cmd_remove_book, commands=["del_b"], state="*")
    dp.register_message_handler(book_number_for_remove, state=RemoveBook.waiting_for_book_number)

    dp.register_message_handler(cmd_change_book, commands=["ch_b"], state="*")
    dp.register_message_handler(book_number_for_change, state=ChangeBook.waiting_for_book_ch_number)
    dp.register_message_handler(book_change_action, state=ChangeBook.waiting_for_book_ch_action)
    dp.register_message_handler(book_change_name, state=ChangeBook.waiting_for_book_ch_name)
    dp.register_message_handler(book_change_author, state=ChangeBook.waiting_for_book_ch_author)
    dp.register_message_handler(book_change_priority, state=ChangeBook.waiting_for_book_ch_priority)
